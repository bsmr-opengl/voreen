/**********************************************************************
 *                                                                    *
 * Voreen - The Volume Rendering Engine                               *
 *                                                                    *
 * Copyright (C) 2005-2009 Visualization and Computer Graphics Group, *
 * Department of Computer Science, University of Muenster, Germany.   *
 * <http://viscg.uni-muenster.de>                                     *
 *                                                                    *
 * This file is part of the Voreen software package. Voreen is free   *
 * software: you can redistribute it and/or modify it under the terms *
 * of the GNU General Public License version 2 as published by the    *
 * Free Software Foundation.                                          *
 *                                                                    *
 * Voreen is distributed in the hope that it will be useful,          *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of     *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the       *
 * GNU General Public License for more details.                       *
 *                                                                    *
 * You should have received a copy of the GNU General Public License  *
 * in the file "LICENSE.txt" along with this program.                 *
 * If not, see <http://www.gnu.org/licenses/>.                        *
 *                                                                    *
 * The authors reserve all rights not expressly granted herein. For   *
 * non-commercial academic use see the license exception specified in *
 * the file "LICENSE-academic.txt". To get information about          *
 * commercial licensing please contact the authors.                   *
 *                                                                    *
 **********************************************************************/

#include "voreen/qt/widgets/compactproperty/compactpropertyvectorwidget.h"

#include "voreen/core/vis/properties/propertyvector.h"
#include "voreen/core/vis/properties/allproperties.h"

#include "voreen/qt/widgets/compactproperty/compactpropertywidgetfactory.h"
#include "tgt/logmanager.h"

#include <QCheckBox>
#include <QHBoxLayout>
#include <QHBoxLayout>
#include <QLabel>
#include <QFrame>
#include <QScrollArea>

namespace voreen {  

CompactPropertyVectorWidget::CompactPropertyVectorWidget(PropertyVector* prop, QWidget* parent)
    : CompactPropertyWidget(prop, parent),
      property_(prop)
{
    
    addVisibilityControls();

    // copy over title widgets generated by superclass 
    // and by addVisibilityControls() to header layout
    QHBoxLayout* headerLayout = new QHBoxLayout();
    for (int i=0; i<layout()->count(); ++i)
        headerLayout->addItem(layout()->itemAt(i));
    while (layout()->count() > 0)
        layout()->removeItem(layout()->itemAt(0));

    // re-generate the widgets main layout
    delete layout();
    layout_ = new QHBoxLayout(this);
    layout_->setContentsMargins(0,5,0,5);

    // vertical layout of the widget
    QVBoxLayout* widgetLayout = new QVBoxLayout();
    widgetLayout->setSpacing(1);
    layout_->addLayout(widgetLayout);

    // add header layout to widget layout
    widgetLayout->addLayout(headerLayout);

    // layout containing the property widgets
    propertiesLayout_ = new QVBoxLayout();
    propertiesLayout_->setContentsMargins(5,3,3,3);
    propertiesLayout_->setSpacing(0);

    // scrollarea surrounding the property widgets
    QWidget* scrollWidget = new QWidget();
    scrollWidget->setLayout(propertiesLayout_);
    QScrollArea* scrollArea = new QScrollArea();
    scrollArea->setWidget(scrollWidget);
    scrollArea->setWidgetResizable(true);
    widgetLayout->addWidget(scrollArea);

    // add property widgets to properties layout
    CompactPropertyWidgetFactory f;
    for (size_t i=0; i<property_->getProperties().size(); ++i) {
        createAndAddPropertyWidget(property_->getProperties().at(i), &f);
    }

    setFixedHeight(230);
}


void CompactPropertyVectorWidget::update() {

}

void CompactPropertyVectorWidget::setProperty(PropertyVector* /*change*/) {

}

void CompactPropertyVectorWidget::createAndAddPropertyWidget(Property* prop, CompactPropertyWidgetFactory* factory) {
    
    QPropertyWidget* propertyWidget = dynamic_cast<QPropertyWidget*>(prop->createAndAddWidget(factory));

    if (propertyWidget) {
        connect(propertyWidget, SIGNAL(propertyChanged()), this, SIGNAL(propertyChanged()));
        propertyWidget->hideLODControls();
        propertyWidget->setMinimumWidth(250);
        propertiesLayout_->addWidget(propertyWidget);
    }
    else {
        LERRORC("voreen.qt.CompactPropertyVectorWidget", "Unable to create property widget");
    }   

}

} // namespace
